@page "/"
@inject Negocio_Word_BLL negocioWordBLL

<h3>Factibilidad del negocio</h3>

@if (currentQuestionIndex < preguntas.Count)
{
    <h4>@preguntas[currentQuestionIndex].Preguntas</h4>
    <div class="form-group">
        <div class="form-check">
            <input class="form-check-input" type="radio" name="respuesta" id="respuestaSi" value="true" checked="@(preguntas[currentQuestionIndex].Respuestas)">
            <label class="form-check-label" for="respuestaSi">
                Sí
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="respuesta" id="respuestaNo" value="false" checked="@(preguntas[currentQuestionIndex].Respuestas == false)">
            <label class="form-check-label" for="respuestaNo">
                No
            </label>
        </div>
    </div>
    @if (preguntas[currentQuestionIndex].Respuestas)
    {
        <div class="form-group">
            <label for="explicacion">Explicación:</label>
            <textarea class="form-control" id="explicacion" rows="3" @bind="@preguntas[currentQuestionIndex].Explicacion"></textarea>
        </div>
    }
    <div>
        <button class="btn btn-primary" @onclick="() => ResponderPregunta(true)">Responder</button>
    </div>
}
else
{
    <h4>El negocio es @ObtenerFactibilidadNegocio().</h4>
}

<div class="mt-3">
    <h5>Agregar nueva pregunta:</h5>
    <div class="input-group">
        <input class="form-control" @bind="@nuevaPregunta" />
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="AgregarNuevaPregunta">Agregar</button>
        </div>
    </div>
</div>

<button class="btn btn-secondary mt-3" @onclick="Reiniciar">Reiniciar</button>

@code {
    [Parameter]
    public int PreguntaR_ID { get; set; }

    private List<Preguntas_Respuestas> preguntas;
    private Preguntas_Respuestas preguntasR = new Preguntas_Respuestas();
    private int currentQuestionIndex;
    private bool esFactible;
    private string nuevaPregunta;

    protected override void OnInitialized()
    {
        InicializarPreguntas();
        Reiniciar();
        if (PreguntaR_ID > 0)
        {
            preguntasR.PreguntaR_ID = PreguntaR_ID;
        }
    }

    private void InicializarPreguntas()
    {
        preguntas = new List<Preguntas_Respuestas>
        {
            new Preguntas_Respuestas { Preguntas = "¿Tienes un plan de negocios?" },
            new Preguntas_Respuestas { Preguntas = "¿Cuentas con el capital necesario?" },
            new Preguntas_Respuestas { Preguntas = "¿Existe demanda para tu producto/servicio?" },
            new Preguntas_Respuestas { Preguntas = "¿Conoces bien el mercado y la competencia?" },
            new Preguntas_Respuestas { Preguntas = "¿Tienes habilidades y experiencia relevantes?" },
            new Preguntas_Respuestas { Preguntas = "¿Tienes una estrategia de marketing sólida?" },
            new Preguntas_Respuestas { Preguntas = "¿Tienes un equipo calificado?" }
        };
    }

    private void ResponderPregunta(bool respuesta)
    {
        preguntas[currentQuestionIndex].Respuestas = respuesta;
        currentQuestionIndex++;

        if (currentQuestionIndex >= preguntas.Count)
        {
            esFactible = CalcularFactibilidadNegocio();
            bool guardo = negocioWordBLL.Guardar(preguntasR);
            if (guardo)
            {
                // Aquí puedes realizar alguna acción adicional después de guardar exitosamente los datos
            }
            else
            {
                // Aquí puedes manejar una situación en la que no se pudo guardar los datos correctamente
            }
        }
    }

    private bool CalcularFactibilidadNegocio()
    {
        bool todasRespuestasVerdaderas = preguntas.All(p => p.Respuestas);
        return todasRespuestasVerdaderas;
    }

    private string ObtenerFactibilidadNegocio()
    {
        return esFactible ? "factible" : "no factible";
    }

    private void Reiniciar()
    {
        currentQuestionIndex = 0;
        esFactible = false;

        foreach (var pregunta in preguntas)
        {
            pregunta.Respuestas = false;
            pregunta.Explicacion = string.Empty;
        }
    }

    private void AgregarNuevaPregunta()
    {
        if (!string.IsNullOrWhiteSpace(nuevaPregunta))
        {
            preguntas.Add(new Preguntas_Respuestas { Preguntas = nuevaPregunta });
            nuevaPregunta = string.Empty;
        }
    }
}
