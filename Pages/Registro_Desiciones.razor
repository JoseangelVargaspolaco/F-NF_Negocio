@page "/"

@using System.Collections.Generic
@inject IEncuestaService encuestaService

<h3 >Encuesta</h3>

@if (preguntas.Count > 0 && preguntaActual < preguntas.Count)
{
    <h4>Pregunta @preguntaActual: @preguntas[preguntaActual].Enunciado</h4>
    <div>
        @for (int i = 0; i < preguntas[preguntaActual].Opciones.Count; i++)
        {
            var opcion = preguntas[preguntaActual].Opciones[i];
            var isSelected = preguntas[preguntaActual].OpcionesSeleccionadas.Any(o => o.Opcion == opcion && o.Seleccionada);

            <div class="form-check">
                <input type="radio" name="respuestaActual" value="@opcion" @onchange="() => ResponderPregunta(preguntas[preguntaActual], opcion)" checked="@isSelected" />
                <label class="form-check-label">@opcion</label>
            </div>
        }
    </div>
    <hr />
    <button class="btn btn-primary" @onclick="SiguientePregunta">Siguiente</button>
}
else if (preguntaActual == preguntas.Count)
{
    <h4>Resultado:</h4>
    <p>Porcentaje de factibilidad: @CalcularPorcentajeFactibilidad()%</p>
    <p>El negocio es @CalcularFactibilidadNegocio().</p>
}


@code {

    private int preguntaActual = 0;
    private List<Preguntas> preguntas = new List<Preguntas>
    {
        new Preguntas
        {
            Enunciado = "¿Quienes son?",
            Opciones = new List<string> { "Socios estratégicos", "Proveedores", "Clientes", "Empleados" }
        },
        new Preguntas
        {
            Enunciado = "¿Quiénes le ofrecen servicios y recursos estratégicos?",
            Opciones = new List<string> { "Proveedores de materias primas", "Aliados estratégicos", "Inversionistas" }
        },
        new Preguntas
        {
            Enunciado = "¿Qué actividades internas podrían subcontratarse para bajar costos y mejorar la calidad?",
            Opciones = new List<string> { "Producción", "Logística", "Servicio al cliente" }
        },
        new Preguntas
        {
            Enunciado = "Actividades claves ¿Cuáles son las actividades y los procesos clave en su modelo de negocios?",
            Opciones = new List<string> { "Investigación y desarrollo", "Producción", "Marketing y ventas", "Servicio al cliente" }
        },
        new Preguntas
        {
            Enunciado = "¿Cuáles son los recursos clave y más costosos en su modelo de negocios?",
            Opciones = new List<string> { "Tecnología", "Personal calificado", "Maquinaria y equipo", "Capital" }
        },
        new Preguntas
        {
            Enunciado = "Propuesta de valor ¿Qué ofrece a sus clientes en términos de productos / servicios?",
            Opciones = new List<string> { "Productos de alta calidad", "Servicios personalizados", "Precios competitivos" }
        },
        new Preguntas
        {
            Enunciado = "¿Qué es lo que pagan los clientes?",
            Opciones = new List<string> { "Productos", "Servicios", "Suscripciones" }
        },
        new Preguntas
        {
            Enunciado = "¿Qué lo diferencia de otros oferentes?",
            Opciones = new List<string> { "Innovación", "Atención al cliente", "Experiencia del cliente" }
        },
        new Preguntas
        {
            Enunciado = "Administración de la relación ¿Qué tipo de relación construye usted con sus clientes?",
            Opciones = new List<string> { "Personalizada", "Automatizada", "Basada en la comunidad" }
        },
        new Preguntas
        {
            Enunciado = "¿Tiene usted alguna estrategia?",
            Opciones = new List<string> { "Expandir mercado", "Diversificar productos", "Adoptar nuevas tecnologías" }
        },
        new Preguntas
        {
            Enunciado = "Canales de distribución ¿Cómo hace el cliente para adquirir el producto?",
            Opciones = new List<string> { "Tiendas físicas", "Tiendas en línea", "Distribuidores" }
        },
        new Preguntas
        {
            Enunciado = "¿A través de qué medios?",
            Opciones = new List<string> { "Internet", "Teléfono", "Agentes de ventas" }
        },
        new Preguntas
        {
            Enunciado = "Segmento de mercado ¿Quiénes son sus clientes?",
            Opciones = new List<string> { "Particulares", "Empresas", "Gobierno" }
        },
        new Preguntas
        {
            Enunciado = "¿Puede describir sus diferentes tipos de clientes?",
            Opciones = new List<string> { "Jóvenes", "Adultos", "Clientes corporativos" }
        },
        new Preguntas
        {
            Enunciado = "¿Cuál es la diferencia de cada segmento?",
            Opciones = new List<string> { "Necesidades", "Comportamiento de compra", "Presupuesto" }
        },
        new Preguntas
        {
            Enunciado = "Estructura de costos ¿Cómo luce su estructura de costos?",
            Opciones = new List<string> { "Costos fijos", "Costos variables", "Costos de personal" }
        },
        new Preguntas
        {
            Enunciado = "¿Cuáles son los más importantes costos al poner en funcionamiento su empresa?",
            Opciones = new List<string> { "Alquiler de local", "Materias primas", "Publicidad" }
        },
        new Preguntas
        {
            Enunciado = "Ingresos / Precios ¿Cuál es su estructura de ingresos?",
            Opciones = new List<string> { "Ventas", "Comisiones", "Suscripciones" }
        },
        new Preguntas
        {
            Enunciado = "¿Cómo gana dinero?",
            Opciones = new List<string> { "Venta de productos", "Venta de servicios", "Inversiones" }
        },
        new Preguntas
        {
            Enunciado = "¿Qué tipo de ingresos obtiene usted?",
            Opciones = new List<string> { "Transacciones bancarias", "Facturación directa", "Pago por crédito" }
        }
    };

    
    private void ResponderPregunta(Preguntas pregunta, string opcion)
    {
        var opcionSeleccionada = pregunta.OpcionesSeleccionadas.FirstOrDefault(o => o.Opcion == opcion);

        if (opcionSeleccionada != null)
        {
            opcionSeleccionada.Seleccionada = true;
        }
        else
        {
            pregunta.OpcionesSeleccionadas.Add(new OpcionSeleccionada { Opcion = opcion, Seleccionada = true });
        }
    }

    private void SiguientePregunta()
    {
        if (preguntas[preguntaActual].OpcionesSeleccionadas.Any(o => o.Seleccionada))
        {
            preguntaActual++;
        }
    }

    private int CalcularPorcentajeFactibilidad()
    {
        int totalPreguntas = preguntas.Count;
        int totalSeleccionadas = preguntas.Sum(p => p.OpcionesSeleccionadas.Count(o => o.Seleccionada));
        int porcentajeFactibilidad = (totalSeleccionadas / totalPreguntas) * 100;

        return porcentajeFactibilidad;
    }

    private string CalcularFactibilidadNegocio()
    {
        int porcentajeFactibilidad = CalcularPorcentajeFactibilidad();
        string factibilidadNegocio;

        if (porcentajeFactibilidad == 100)
        {
            factibilidadNegocio = "factible";
        }
        else if (porcentajeFactibilidad >= 50)
        {
            factibilidadNegocio = "medianamente factible";
        }
        else
        {
            factibilidadNegocio = "no factible";
        }

        return factibilidadNegocio;
    }

    private async Task EnviarEncuesta()
    {
        await encuestaService.GuardarRespuestas(preguntas);
    }
}
